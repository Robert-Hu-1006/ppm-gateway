#version: '3'

volumes:
  prometheus_data: {}
  grafana_data: {}
  mqtt_data: {}
  mqtt_log: {}
  gateway_json:
    driver: local
    driver_opts:
      type: none
      device: /Users/robert/data/gateway/json
      o: bind
  telegraf_conf:
    driver: local
    driver_opts:
      type: none
      device: /Users/robert/data/gateway/conf
      o: bind
  ppm_tag:
    driver: local
    driver_opts:
      type: none
      device: /Users/robert/data/gateway/tag
      o: bind
networks:
  video_net:
  iot_net:
  back_net:

services:
  grafana:
    image: roberthu1006/gateway-grafana:0.0.2
    build:
      context: ./grafana
      dockerfile: Dockerfile
    container_name: grafana
    hostname: grafana
    restart: unless-stopped
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      #- ./grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./grafana/provisioning/:/etc/grafana/provisioning/
      - ./grafana/icon:/usr/share/grafana/public/img/icon
    env_file: 
      - .env
    # Docker Compose 範例
    environment:
      - GF_AUTH_LOGIN_MAXIMUM_INACTIVE_LIFETIME_DURATION=30m
      - GF_AUTH_LOGIN_MAXIMUM_LIFETIME_DURATION=12h
      - GF_AUTH_DISABLE_LOGIN_REMEMBER_ME=true
      - GF_AUTH_SESSION_COOKIE_MAX_AGE=0
      - GF_AUTH_SESSION_COOKIE_SECURE=true
      - GF_AUTH_SESSION_COOKIE_SAMESITE=lax
    networks:
      - iot_net
      - back_net

  mosquitto:
    image: eclipse-mosquitto:2.0.21
    restart: unless-stopped
    container_name: mosquitto
    hostname: mosquitto
    ports:
      - 1880:1880
    env_file: 
      - .env
    volumes:
      - mqtt_log:/mosquitto/log:rw
      - mqtt_data:/mosquitto/data:rw
      - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - ./mosquitto/mosquitto.pwd:/mosquitto/config/mosquitto.pwd
    command: mosquitto -c /mosquitto/config/mosquitto.conf
    networks:
      - iot_net
  
  nginx:
    image: roberthu1006/gateway-nginx:0.0.2
    container_name: nginx
    hostname: nginx
    build:
      context: ./nginx
      dockerfile: Dockerfile
    restart: always
    ports:
      - 80:80
      - 443:443
      - 1883:1883
      - 8883:8883
    networks:
      - video_net
      - iot_net
      - back_net
    volumes:
      - gateway_json:/data/json
    depends_on:
      - mosquitto
      - streamer
  
  telegraf:
    image: telegraf:1.34.0
    restart: always
    container_name: telegraf
    hostname: telegraf
    ports:
      - 9273:9273
    volumes:
      - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf
      - telegraf_conf:/etc/telegraf/conf/
      - ppm_tag:/etc/telegraf/tag
    depends_on:
      - mosquitto
      - streamer
    command: telegraf --config /etc/telegraf/telegraf.conf --config-directory /etc/telegraf/conf/
    env_file:
      - .env
    networks:
      - iot_net
    
  streamer:
    image: roberthu1006/gateway-streamer:0.0.2
    build:
      context: ./streamer
      dockerfile: Dockerfile
    container_name: streamer
    hostname: streamer
    restart: always
    # 每棟樓或一個subnet 一台gateway及一個代碼
    env_file: 
      - .env
    #ports:
    #  - 3010:3010
    #  - 9274:8010
    volumes:
      - telegraf_conf:/etc/telegraf/conf/
      - ppm_tag:/etc/telegraf/tag
      - gateway_json:/data
    networks:
      - video_net
      - back_net

  apiserver:
    image: roberthu1006/gateway-apiserver:0.0.2
    build:
      context: ./apiserver
      dockerfile: Dockerfile
    container_name: apiserver
    hostname: apiserver
    restart: always
    ports:
      - 3010:3010
    volumes:
      - gateway_json:/data
      #- /var/run/docker.sock:/var/run/docker.sock
    env_file: 
      - .env
    environment:
      - API_PORT=3010
    networks:
      - back_net

  prometheus:
    image: prom/prometheus:v3.2.1
    restart: unless-stopped
    container_name: prometheus
    hostname: prometheus
    ports:
      - 9090:9090
    environment:
      - TZ=Asia/Taipei
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      #- ./prometheus/rules/alert_rules.yml:/etc/prometheus/rules/alert_rules.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml 
    networks:
      - iot_net


  